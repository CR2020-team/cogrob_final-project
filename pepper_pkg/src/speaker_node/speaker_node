#!/usr/bin/python
"""
This node makes the robot speak. It will say what the received detections contain.
"""

import inflect
from collections import Counter
import rospy
from naoqi_driver.naoqi_node import NaoqiNode
from pepper_msgs.srv import SayDetections, SayDetectionsResponse


class SpeakerNode(NaoqiNode):
    """Class used as an abstraction of the Node"""

    __slots__ = 'animatedSpeechProxy', '_text_components', '_direction_to_text', '_counter', '_engine'

    def __init__(self):
        """
        Constructor. Creates the node and connects it to the NaoQi interface.
        It also initializes internal variables used to create and coordinate what the robot has to say.
        """
        NaoqiNode.__init__(self, 'speaker_node')
        self.connectNaoQi()
        self._direction_to_text = {
            1: "on the left",
            0: "in front of me",
            -1: "on the right",
        }
        self._text_components = {key: None for key in self._direction_to_text.keys()}
        self._engine = inflect.engine()  # used to compute plurals and indefinite articles
        self._counter = 0  # used to track how many directions have been processed

    def connectNaoQi(self):
        """
        Connects the node to the NaoQi interface. The parameters pip and pport are stored in the parameter server.
        The Proxy used is ALAnimatedSpeech, in order to make the robot speak when the sentence is ready and
        make the robot move while speaking.
        """
        self.pip = rospy.get_param('pip')
        self.pport = rospy.get_param('pport')
        rospy.loginfo("SpeakerNode connecting to NaoQi at %s:%d", self.pip, self.pport)
        proxy = 'ALAnimatedSpeech'
        self.animatedSpeechProxy = self.get_proxy(proxy)
        if self.animatedSpeechProxy is None:
            raise rospy.ROSInitException('Unable to connect to {} proxy!'.format(proxy))
        self.animatedSpeechProxy.setBodyLanguageModeFromStr("contextual")
        # self.animatedSpeechProxy.setParameter("speed", 75)
        rospy.loginfo("{} successful!".format(proxy))

    def start(self):
        """
        Actual execution of the node.
        It creates a service server for converting detected objects into a string.
        """
        rospy.Service(rospy.get_param('speaker_service'), SayDetections, self.handle_speaker)

    def handle_speaker(self, req):
        """
        The handler of the service request.
        Upon receiving a request, it stores a part of the sentence to say.
        The TTS will be performed when the three directions are all into the sentence to say.
        In addition, if no object is detected on one side, the robot will say that it sees nothing.
        The request is a list of detected objects and the direction at which the objects has been detected.
        The response is True when the direction is valid.
        """
        direction = req.direction
        if direction not in self._text_components.keys():
            rospy.logerr('Direction {} not valid. Only {} allowed.'.format(direction, self._text_components.keys()))
            return SayDetectionsResponse(False)

        self._counter += 1
        d = Counter(detection.clabel for detection in req.detections)
        items = [self._item_to_text(key, value) for key, value in d.items()]
        if len(items) == 0:
            self._text_components[direction] = "nothing"
        elif len(items) == 1:
            self._text_components[direction] = items[0]
        else:
            self._text_components[direction] = ' and '.join((', '.join(items[:-1]), items[-1]))
        self._text_components[direction] += ' ' + self._direction_to_text[direction]

        if self._counter == len(self._direction_to_text):
            text = "I can see: " + ', '.join(
                self._text_components[direction] for direction in sorted(self._text_components.keys())) + '.'

            rospy.loginfo(text)  # FIXME
            self.animatedSpeechProxy.say(text)

            self._counter = 0

        return SayDetectionsResponse(True)

    def _item_to_text(self, key, value):
        """
        Utility function that return the objects with the corresponding article or number.
        """
        return str(self._engine.a(key)) if value == 1 else "{} {}".format(value, self._engine.plural(key))


SpeakerNode().start()
try:
    rospy.spin()
except (KeyboardInterrupt, rospy.exceptions) as e:
    rospy.loginfo("shutdown: %s" % e)
