#!/usr/bin/python
"""
This node starts the acquisition of images from the robot's camera and provides the input for the detections.
"""

import rospy
from naoqi_driver.naoqi_node import NaoqiNode
from pepper_msgs.srv import TakePicture, TakePictureResponse, DetectImage
from sensor_msgs.msg import Image
from std_msgs.msg import Header
import genpy
import ros_numpy
import cv2
import sys


class CameraNode(NaoqiNode):
    """Class used as an abstraction of the Node"""

    __slots__ = 'videoDeviceProxy', 'videoDevice', '_pub'

    def __init__(self):
        """
        Constructor. Creates the node, connects it to the NaoQi interface, and subscribes the proper camera.
        """
        NaoqiNode.__init__(self, 'camera_node')
        self.connectNaoQi()
        cameraID = 0  # CameraID 0 means TopCamera
        resolution = 3  # Resolution 3 means Image of 1280*960px
        colorSpace = 13  # Color Space 13 means BGR
        self.videoDevice = self.videoDeviceProxy.subscribeCamera("pepper_top_camera", cameraID, resolution, colorSpace, 10)

    def connectNaoQi(self):
        """
        Connects the node to the NaoQi interface. The parameters pip and pport are stored in the parameter server.
        The Proxy used is ALVideoDevice in order to handle the images from camera.
        """
        self.pip = rospy.get_param('pip')
        self.pport = rospy.get_param('pport')
        rospy.loginfo("CameraNode connecting to NaoQi at %s:%d", self.pip, self.pport)
        proxy = 'ALVideoDevice'
        self.videoDeviceProxy = self.get_proxy(proxy)
        if self.videoDeviceProxy is None:
            raise rospy.ROSInitException('Unable to connect to {} proxy!'.format(proxy))
        rospy.loginfo("{} successful!".format(proxy))

    def start(self):
        """
        Actual execution of the node.
        It creates a service server for taking pictures.
        """
        rospy.Service(rospy.get_param('take_picture_service'), TakePicture, self.handle_take_picture)

    def handle_take_picture(self, req):
        """
        The handler of the service request.
        Acquires the image from the camera and passes it as part of the request to the DetectImage service.
        The request is the direction at which the image must be taken.
        The response is True when the picture is taken and processed by the detector correctly, False otherwise.
        """
        direction = req.direction
        result = self.videoDeviceProxy.getImageRemote(self.videoDevice)
        if result is None or result[6] is None:
            rospy.logerr("Problem with camera while acquiring image!")
            return TakePictureResponse(False)
        image = Image(
            header=Header(stamp=genpy.Time(secs=result[4], nsecs=1000 * result[5])),
            height=result[1],
            width=result[0],
            encoding="bgr8",
            is_bigendian=False,
            step=result[0] * result[2],
            data=result[6]
        )
        ret = self.detect_image(image, direction)
        if not ret:
            rospy.logerr('Unable to detect objects for direction {}'.format(direction))
            return TakePictureResponse(False)
        cv2.imwrite(os.path.join(os.path.dirname(os.path.realpath(__file__)),
                                 'image{}.jpg'.format(direction), ros_numpy.numpify(image)))
        rospy.loginfo("Image for direction {} acquired".format(direction))
        return TakePictureResponse(True)

    def detect_image(self, image, direction):
        """
        Calls the DetectImage service.
        The request is the image taken and the current direction.
        The response is the success of the service.
        """
        service = rospy.get_param('detector_service')
        rospy.wait_for_service(service)
        try:
            detect_image_request = rospy.ServiceProxy(service, DetectImage)
            return detect_image_request(image, direction).success
        except rospy.ServiceException as exc:
            print("Service call failed: %s" % exc)
            return False


CameraNode().start()
try:
    rospy.spin()
except (KeyboardInterrupt, rospy.exceptions) as e:
    rospy.loginfo("shutdown: %s" % e)
