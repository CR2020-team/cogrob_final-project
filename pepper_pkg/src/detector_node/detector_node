#!/usr/bin/python3
"""
This node detects objects in images.
"""

import os
from threading import Lock
import rospy
from classmap import category_map as classmap  # https://gist.github.com/xhlulu/f7735970704b97fd0b72203628c1cc77
from pepper_msgs.msg import DetectionWithScore
from pepper_msgs.srv import DetectImage, DetectImageResponse, SayDetections
import ros_numpy


class DetectorNode:
    """Class used as an abstraction of the Node"""

    """Detections with a confidence score lower than SCORE_TH will not be considered as actual detections."""
    SCORE_TH = 0.45

    __slots__ = 'detector', '_pub', '_verbose', '_images', '_ready', '_lock'

    def __init__(self):
        """
        Constructor.
        Creates the node and connects it to the NaoQi interface.
        """
        rospy.init_node('detector_node')
        self._images = {}
        self._ready = False
        self._lock = Lock()

    def __call__(self, image, direction, verbose=False):
        """
        Runs inference in image, performing detections on it.
        Publishes a DetectionArrayWithDirection message containing direction and the detected objects.
        """
        self._lock.acquire()
        detections = self.detector(image, self.SCORE_TH)
        objects_detected = []
        for clabel, score in zip(detections['detection_classes'], detections['detection_scores']):
            if clabel in classmap:
                d = DetectionWithScore()
                d.clabel = classmap[clabel]
                d.score = score
                objects_detected.append(d)
        ret = self.say_detections(objects_detected, direction)
        if not ret:
            raise KeyError('Unable to recognize detections at direction {}'.format(direction))
        if verbose:
            rospy.loginfo("{} objects detected in image at direction {}".format(len(message.detections), direction))
        self._lock.release()

    def start(self, detector_model_name='efficientdet_d1_coco17_tpu-32', verbose=False):
        """
        Actual execution of the node.
        Loads the detector model and creates a service server for detecting objects in a picture.
        """
        rospy.Service(rospy.get_param('detector_service'), DetectImage, self.handle_detector)
        self._verbose = verbose
        DET_PATH = os.path.join(os.path.dirname(__file__), 'models', detector_model_name, 'saved_model')
        rospy.loginfo("Loading model...")
        from detector import Detector
        self.detector = Detector(DET_PATH)
        self._ready = True
        rospy.loginfo("Model loaded!")
        for direction, image in self._images.items():
            self(image, direction, self._verbose)

    def handle_detector(self, req):
        """
        The handler of the service request.
        If the model is loaded, performs a detection on the image. Otherwise, appends the image in a queue.
        The request is an image and the direction at which the image has been taken.
        The response is True when the picture is processed by the detector correctly and the direction is valid.
        """
        try:
            if self._ready:
                self(ros_numpy.numpify(req.image), req.direction, self._verbose)
            else:
                self._images[req.direction] = ros_numpy.numpify(req.image)
            return DetectImageResponse(True)
        except (KeyError, ValueError) as exc:
            rospy.logerr('Unable to interpret image at direction {}: {}'.format(req.direction, exc))
            return DetectImageResponse(False)

    def say_detections(self, detections, direction):
        """
        Calls the SayDetections service.
        The request is the detected objects and the current direction.
        The response is the success of the service.
        """
        service = rospy.get_param('speaker_service')
        rospy.wait_for_service(service)
        try:
            say_detections_request = rospy.ServiceProxy(service, SayDetections)
            return say_detections_request(detections, direction).success
        except rospy.ServiceException as exc:
            print("Service call failed: %s" % exc)
            return False


DetectorNode().start(verbose=True)
try:
    rospy.spin()
except (KeyboardInterrupt, rospy.exceptions) as e:
    rospy.loginfo("shutdown: %s" % e)
